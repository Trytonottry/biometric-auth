name: Build and Release BiometricAuth

on:
  push:
    tags:
      - 'v*'  # Запуск при тегах вида v1.0.0

env:
  PROJECT_NAME: BiometricAuth
  MAIN_SCRIPT: main.py

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Create main.py
      run: |
        echo 'from app.run import app
if __name__ == "__main__":
    app.run(host="127.0.0.1", port=5000, debug=False)
        ' > ${{ env.MAIN_SCRIPT }}

    - name: Copy project data
      run: |
        cp -r app/ templates/ instance/ data/ ./

    - name: Build EXE (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --name="${{ env.PROJECT_NAME }}" ^
          --windowed ^
          --onefile ^
          --add-data "app;app" ^
          --add-data "templates;templates" ^
          --add-data "instance;instance" ^
          --add-data "data;data" ^
          --hidden-import=face_recognition ^
          --hidden-import=cv2 ^
          --hidden-import=numpy ^
          ${{ env.MAIN_SCRIPT }}
      shell: cmd

    - name: Build AppImage (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --name="${{ env.PROJECT_NAME }}" \
          --windowed \
          --onefile \
          --add-data "app:app" \
          --add-data "templates:templates" \
          --add-data "instance:instance" \
          --add-data "data:data" \
          --hidden-import=face_recognition \
          --hidden-import=cv2 \
          --hidden-import=numpy \
          ${{ env.MAIN_SCRIPT }}

        # Установка appimagetool
        wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

        # Создание AppDir
        mkdir -p ${{ env.PROJECT_NAME }}.AppDir
        cp dist/${{ env.PROJECT_NAME }} ${{ env.PROJECT_NAME }}.AppDir/AppRun
        cp -r templates instance data ${{ env.PROJECT_NAME }}.AppDir/

        cat > ${{ env.PROJECT_NAME }}.AppDir/${{ env.PROJECT_NAME }}.desktop << EOL
[Desktop Entry]
Name=${{ env.PROJECT_NAME }}
Exec=AppRun
Icon=${{ env.PROJECT_NAME }}
Type=Application
Categories=Security;Authentication;
Comment=Biometric Authentication System
EOL

        cp templates/favicon.ico ${{ env.PROJECT_NAME }}.AppDir/${{ env.PROJECT_NAME }}.png

        # Сборка AppImage
        appimagetool ${{ env.PROJECT_NAME }}.AppDir

    - name: Build DMG (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --name="${{ env.PROJECT_NAME }}" \
          --windowed \
          --onefile \
          --add-data "app:app" \
          --add-data "templates:templates" \
          --add-data "instance:instance" \
          --add-data "data:data" \
          ${{ env.MAIN_SCRIPT }}

        # Создание образа
        hdiutil create -volname ${{ env.PROJECT_NAME }} \
          -srcfolder dist/${{ env.PROJECT_NAME }} \
          -ov -format UDZO \
          ${{ env.PROJECT_NAME }}.dmg

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-build
        path: |
          dist/${{ env.PROJECT_NAME }}.exe
          *.AppImage
          *.dmg
          ${{ env.PROJECT_NAME }}.exe

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Rename files
      run: |
        mkdir release
        find . -name "*.exe" -exec cp {} release/ \;
        find . -name "*.AppImage" -exec cp {} release/ \;
        find . -name "*.dmg" -exec cp {} release/ \;

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/*
        asset_name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ github.ref }}.$
        asset_content_type: application/octet-stream